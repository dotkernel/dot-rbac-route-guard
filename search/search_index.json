{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dot-rbac-route-guard dot-rbac-route-guard is Dotkernel's RBAC Route guard component. Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria. If the authorization service can be used to check authorization on a narrow level, the guards are meant to work as gateways to bigger parts of an application. Usually, you'll want to use both methods in an application for increased security. Documentation Documentation is available at: https://docs.dotkernel.org/dot-rbac-route-guard/. Badges Installation Run the following command in your project's root directory: composer require dotkernel/dot-rbac-route-guard Please note that this library is built around the authorization service defined in dotkernel/dot-rbac . Running the above command will also install that library. You'll have to first configure dot-rbac before using this library. Configuration As with many Dotkernel libraries, we focus on the configuration based approach of customizing the module for your needs. After installing, merge dot-rbac-route-guard 's ConfigProvider with your application's config to make sure required dependencies and default library configuration are registered. Create a configuration file for this library in your 'config/autoload' folder. authorization-guards.global.php You can copy the below code or use the existing authorization-guards.global.php.dist to create your version of authorization-guards.global.php . &lt;?php declare(strict_types=1); use Dot\\Rbac\\Route\\Guard\\Guard\\GuardInterface; return [ 'dot_authorization' =&gt; [ //define how it will treat non-matching guard rules, allow all by default 'protection_policy' =&gt; \\Dot\\Rbac\\Route\\Guard\\Guard\\GuardInterface::POLICY_ALLOW, 'event_listeners' =&gt; [ [ 'type' =&gt; 'class or service name of the listener', 'priority' =&gt; 1, ], ], //define custom guards here 'guard_manager' =&gt; [], //register custom guards providers here 'guards_provider_manager' =&gt; [], //define which guards provider to use, along with its configuration //the guards provider should know how to build a list of GuardInterfaces based on its configuration 'guards_provider' =&gt; [ 'type' =&gt; 'ArrayGuards', 'options' =&gt; [ 'guards' =&gt; [ [ 'type' =&gt; 'Route', 'options' =&gt; [ 'rules' =&gt; [ 'premium' =&gt; ['admin'], 'login' =&gt; ['guest'], 'logout' =&gt; ['admin', 'user', 'viewer'], 'account' =&gt; ['admin', 'user'], 'home' =&gt; ['*'], ], ], ], [ 'type' =&gt; 'RoutePermission', 'options' =&gt; [ 'rules' =&gt; [ 'premium' =&gt; ['premium'], 'account' =&gt; ['my-account'], 'logout' =&gt; ['only-logged'], ], ], ], ], ], ], //overwrite default messages 'messages_options' =&gt; [ 'messages' =&gt; [ //MessagesOptions::UNAUTHORIZED =&gt; 'You must sign in first to access the requested content', //MessagesOptions::FORBIDDEN =&gt; 'You don\\'t have enough permissions to access the requested content', ], ], ], ]; Register RbacGuardMiddleware in the pipeline The last step in order to use this package is to register the middleware. This middleware triggers the authorization event. You MUST insert this middleware between the routing middleware and the dispatch middleware of the application, because the guards need the RouteResult in order to get the matched route and params. middleware-pipeline.global.php //... 'routing' =&gt; [ 'middleware' =&gt; [ ApplicationFactory::ROUTING_MIDDLEWARE, //... \\Dot\\Rbac\\Guard\\Middleware\\RbacGuardMiddleware::class, //... ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], //...","title":"Home"},{"location":"#dot-rbac-route-guard","text":"dot-rbac-route-guard is Dotkernel's RBAC Route guard component. Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria. If the authorization service can be used to check authorization on a narrow level, the guards are meant to work as gateways to bigger parts of an application. Usually, you'll want to use both methods in an application for increased security.","title":"dot-rbac-route-guard"},{"location":"#documentation","text":"Documentation is available at: https://docs.dotkernel.org/dot-rbac-route-guard/.","title":"Documentation"},{"location":"#badges","text":"","title":"Badges"},{"location":"#installation","text":"Run the following command in your project's root directory: composer require dotkernel/dot-rbac-route-guard Please note that this library is built around the authorization service defined in dotkernel/dot-rbac . Running the above command will also install that library. You'll have to first configure dot-rbac before using this library.","title":"Installation"},{"location":"#configuration","text":"As with many Dotkernel libraries, we focus on the configuration based approach of customizing the module for your needs. After installing, merge dot-rbac-route-guard 's ConfigProvider with your application's config to make sure required dependencies and default library configuration are registered. Create a configuration file for this library in your 'config/autoload' folder.","title":"Configuration"},{"location":"#register-rbacguardmiddleware-in-the-pipeline","text":"The last step in order to use this package is to register the middleware. This middleware triggers the authorization event. You MUST insert this middleware between the routing middleware and the dispatch middleware of the application, because the guards need the RouteResult in order to get the matched route and params.","title":"Register RbacGuardMiddleware in the pipeline"},{"location":"v1/configuration/","text":"Configuration As with many Dotkernel modules, we focus on the configuration based approach of customizing the module for your needs. After installing, merge the module's ConfigProvider with your application's config to make sure required dependencies and default module configuration are registered. Create a configuration file for this module in your config/autoload folder. authorization-guards.global.php return [ 'dot_authorization' =&gt; [ //define how it will treat non-matching guard rules, allow all by default 'protection_policy' =&gt; \\Dot\\Rbac\\Guard\\GuardInterface::POLICY_ALLOW, 'event_listeners' =&gt; [ [ 'type' =&gt; 'class or service name of the listener', 'priority' =&gt; 1, ], ], //define custom guards here 'guard_manager' =&gt; [], //register custom guards providers here 'guards_provider_manager' =&gt; [], //define which guards provider to use, along with its configuration //the guards provider should know how to build a list of GuardInterfaces based on its configuration 'guards_provider' =&gt; [ 'type' =&gt; 'ArrayGuards', 'options' =&gt; [ 'guards' =&gt; [ [ 'type' =&gt; 'Route', 'options' =&gt; [ 'rules' =&gt; [ 'premium' =&gt; ['admin'], 'login' =&gt; ['guest'], 'logout' =&gt; ['admin', 'user', 'viewer'], 'account' =&gt; ['admin', 'user'], 'home' =&gt; ['*'], ] ] ], [ 'type' =&gt; 'RoutePermission', 'options' =&gt; [ 'rules' =&gt; [ 'premium' =&gt; ['premium'], 'account' =&gt; ['my-account'], 'logout' =&gt; ['only-logged'], ] ] ], ] ], ], //overwrite default messages 'messages_options' =&gt; [ 'messages' =&gt; [ //MessagesOptions::UNAUTHORIZED =&gt; 'You must sign in first to access the requested content', //MessagesOptions::FORBIDDEN =&gt; 'You don\\'t have enough permissions to access the requested content', ] ], ], ];","title":"Configuration"},{"location":"v1/configuration/#configuration","text":"As with many Dotkernel modules, we focus on the configuration based approach of customizing the module for your needs. After installing, merge the module's ConfigProvider with your application's config to make sure required dependencies and default module configuration are registered. Create a configuration file for this module in your config/autoload folder.","title":"Configuration"},{"location":"v1/configuration/#authorization-guardsglobalphp","text":"return [ 'dot_authorization' =&gt; [ //define how it will treat non-matching guard rules, allow all by default 'protection_policy' =&gt; \\Dot\\Rbac\\Guard\\GuardInterface::POLICY_ALLOW, 'event_listeners' =&gt; [ [ 'type' =&gt; 'class or service name of the listener', 'priority' =&gt; 1, ], ], //define custom guards here 'guard_manager' =&gt; [], //register custom guards providers here 'guards_provider_manager' =&gt; [], //define which guards provider to use, along with its configuration //the guards provider should know how to build a list of GuardInterfaces based on its configuration 'guards_provider' =&gt; [ 'type' =&gt; 'ArrayGuards', 'options' =&gt; [ 'guards' =&gt; [ [ 'type' =&gt; 'Route', 'options' =&gt; [ 'rules' =&gt; [ 'premium' =&gt; ['admin'], 'login' =&gt; ['guest'], 'logout' =&gt; ['admin', 'user', 'viewer'], 'account' =&gt; ['admin', 'user'], 'home' =&gt; ['*'], ] ] ], [ 'type' =&gt; 'RoutePermission', 'options' =&gt; [ 'rules' =&gt; [ 'premium' =&gt; ['premium'], 'account' =&gt; ['my-account'], 'logout' =&gt; ['only-logged'], ] ] ], ] ], ], //overwrite default messages 'messages_options' =&gt; [ 'messages' =&gt; [ //MessagesOptions::UNAUTHORIZED =&gt; 'You must sign in first to access the requested content', //MessagesOptions::FORBIDDEN =&gt; 'You don\\'t have enough permissions to access the requested content', ] ], ], ];","title":"authorization-guards.global.php"},{"location":"v1/installation/","text":"Installation Run the following command in your project root directory: composer require dotkernel/dot-rbac-route-guard","title":"Installation"},{"location":"v1/installation/#installation","text":"Run the following command in your project root directory: composer require dotkernel/dot-rbac-route-guard","title":"Installation"},{"location":"v1/overview/","text":"dot-rbac-route-guard dot-rbac-route-guard is Dotkernel's RBAC Route guard component. Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria. If the authorization service can be used to check authorization on a narrow level, the guards are meant to work as gateways to bigger parts of an application. Usually, you'll want to use both methods in an application for increased security. Badges","title":"Overview"},{"location":"v1/overview/#dot-rbac-route-guard","text":"dot-rbac-route-guard is Dotkernel's RBAC Route guard component. Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria. If the authorization service can be used to check authorization on a narrow level, the guards are meant to work as gateways to bigger parts of an application. Usually, you'll want to use both methods in an application for increased security.","title":"dot-rbac-route-guard"},{"location":"v1/overview/#badges","text":"","title":"Badges"},{"location":"v1/updating-pipeline/","text":"Register the RbacGuardMiddleware in the pipeline The last step in order to use this package is to register the middleware. This middleware triggers the authorization event. You MUST insert this middleware between the routing middleware and the dispatch middleware of the application, because the guards need the RouteResult in order to get the matched route and params. middleware-pipeline.global.php //... 'routing' =&gt; [ 'middleware' =&gt; [ ApplicationFactory::ROUTING_MIDDLEWARE, //... \\Dot\\Rbac\\Route\\Guard\\Middleware\\RbacGuardMiddleware::class, //... ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], //...","title":"Updating the Pipeline"},{"location":"v1/updating-pipeline/#register-the-rbacguardmiddleware-in-the-pipeline","text":"The last step in order to use this package is to register the middleware. This middleware triggers the authorization event. You MUST insert this middleware between the routing middleware and the dispatch middleware of the application, because the guards need the RouteResult in order to get the matched route and params.","title":"Register the RbacGuardMiddleware in the pipeline"},{"location":"v1/updating-pipeline/#middleware-pipelineglobalphp","text":"//... 'routing' =&gt; [ 'middleware' =&gt; [ ApplicationFactory::ROUTING_MIDDLEWARE, //... \\Dot\\Rbac\\Route\\Guard\\Middleware\\RbacGuardMiddleware::class, //... ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], //...","title":"middleware-pipeline.global.php"}]}